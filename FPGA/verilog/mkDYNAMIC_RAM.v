//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Thu Jan 11 16:39:29 CST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_read_ram                   O     1 const
// get_read_res                   O     4
// RDY_get_read_res               O     1
// RDY_configure_DE_belonging     O     1 const
// RDY_write_data                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_ram_read_addr_vec_a       I  1414
// read_ram_read_addr_vec_b       I  1414
// configure_DE_belonging_id_DE   I     7 reg
// write_data_addr                I    14
// write_data_data                I     2
// EN_read_ram                    I     1
// EN_configure_DE_belonging      I     1
// EN_write_data                  I     1
// EN_get_read_res                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDYNAMIC_RAM(CLK,
		     RST_N,

		     read_ram_read_addr_vec_a,
		     read_ram_read_addr_vec_b,
		     EN_read_ram,
		     RDY_read_ram,

		     EN_get_read_res,
		     get_read_res,
		     RDY_get_read_res,

		     configure_DE_belonging_id_DE,
		     EN_configure_DE_belonging,
		     RDY_configure_DE_belonging,

		     write_data_addr,
		     write_data_data,
		     EN_write_data,
		     RDY_write_data);
  input  CLK;
  input  RST_N;

  // action method read_ram
  input  [1413 : 0] read_ram_read_addr_vec_a;
  input  [1413 : 0] read_ram_read_addr_vec_b;
  input  EN_read_ram;
  output RDY_read_ram;

  // actionvalue method get_read_res
  input  EN_get_read_res;
  output [3 : 0] get_read_res;
  output RDY_get_read_res;

  // action method configure_DE_belonging
  input  [6 : 0] configure_DE_belonging_id_DE;
  input  EN_configure_DE_belonging;
  output RDY_configure_DE_belonging;

  // action method write_data
  input  [13 : 0] write_data_addr;
  input  [1 : 0] write_data_data;
  input  EN_write_data;
  output RDY_write_data;

  // signals for module outputs
  wire [3 : 0] get_read_res;
  wire RDY_configure_DE_belonging,
       RDY_get_read_res,
       RDY_read_ram,
       RDY_write_data;

  // inlined wires
  wire [1414 : 0] read_addr_vec_a_reg_1$wget, read_addr_vec_b_reg_1$wget;
  wire [1 : 0] ram_serverAdapterA_s1_1$wget,
	       ram_serverAdapterA_writeWithResp$wget;
  wire ram_serverAdapterA_cnt_1$whas,
       ram_serverAdapterA_outData_enqw$whas,
       ram_serverAdapterA_writeWithResp$whas,
       ram_serverAdapterB_outData_enqw$whas;

  // register id_DE_reg
  reg [6 : 0] id_DE_reg;
  wire [6 : 0] id_DE_reg$D_IN;
  wire id_DE_reg$EN;

  // register ram_serverAdapterA_cnt
  reg [2 : 0] ram_serverAdapterA_cnt;
  wire [2 : 0] ram_serverAdapterA_cnt$D_IN;
  wire ram_serverAdapterA_cnt$EN;

  // register ram_serverAdapterA_s1
  reg [1 : 0] ram_serverAdapterA_s1;
  wire [1 : 0] ram_serverAdapterA_s1$D_IN;
  wire ram_serverAdapterA_s1$EN;

  // register ram_serverAdapterB_cnt
  reg [2 : 0] ram_serverAdapterB_cnt;
  wire [2 : 0] ram_serverAdapterB_cnt$D_IN;
  wire ram_serverAdapterB_cnt$EN;

  // register ram_serverAdapterB_s1
  reg [1 : 0] ram_serverAdapterB_s1;
  wire [1 : 0] ram_serverAdapterB_s1$D_IN;
  wire ram_serverAdapterB_s1$EN;

  // register read_addr_vec_a_reg
  reg [1414 : 0] read_addr_vec_a_reg;
  wire [1414 : 0] read_addr_vec_a_reg$D_IN;
  wire read_addr_vec_a_reg$EN;

  // register read_addr_vec_b_reg
  reg [1414 : 0] read_addr_vec_b_reg;
  wire [1414 : 0] read_addr_vec_b_reg$D_IN;
  wire read_addr_vec_b_reg$EN;

  // ports of submodule ram_memory
  reg [13 : 0] ram_memory$ADDRB;
  wire [13 : 0] ram_memory$ADDRA;
  wire [1 : 0] ram_memory$DIA, ram_memory$DIB, ram_memory$DOA, ram_memory$DOB;
  wire ram_memory$ENA, ram_memory$ENB, ram_memory$WEA, ram_memory$WEB;

  // ports of submodule ram_serverAdapterA_outData_beforeDeq
  wire ram_serverAdapterA_outData_beforeDeq$D_IN,
       ram_serverAdapterA_outData_beforeDeq$EN,
       ram_serverAdapterA_outData_beforeDeq$Q_OUT;

  // ports of submodule ram_serverAdapterA_outData_beforeEnq
  wire ram_serverAdapterA_outData_beforeEnq$D_IN,
       ram_serverAdapterA_outData_beforeEnq$EN,
       ram_serverAdapterA_outData_beforeEnq$Q_OUT;

  // ports of submodule ram_serverAdapterA_outData_ff
  wire [1 : 0] ram_serverAdapterA_outData_ff$D_IN,
	       ram_serverAdapterA_outData_ff$D_OUT;
  wire ram_serverAdapterA_outData_ff$CLR,
       ram_serverAdapterA_outData_ff$DEQ,
       ram_serverAdapterA_outData_ff$EMPTY_N,
       ram_serverAdapterA_outData_ff$ENQ,
       ram_serverAdapterA_outData_ff$FULL_N;

  // ports of submodule ram_serverAdapterB_outData_beforeDeq
  wire ram_serverAdapterB_outData_beforeDeq$D_IN,
       ram_serverAdapterB_outData_beforeDeq$EN,
       ram_serverAdapterB_outData_beforeDeq$Q_OUT;

  // ports of submodule ram_serverAdapterB_outData_beforeEnq
  wire ram_serverAdapterB_outData_beforeEnq$D_IN,
       ram_serverAdapterB_outData_beforeEnq$EN,
       ram_serverAdapterB_outData_beforeEnq$Q_OUT;

  // ports of submodule ram_serverAdapterB_outData_ff
  wire [1 : 0] ram_serverAdapterB_outData_ff$D_IN,
	       ram_serverAdapterB_outData_ff$D_OUT;
  wire ram_serverAdapterB_outData_ff$CLR,
       ram_serverAdapterB_outData_ff$DEQ,
       ram_serverAdapterB_outData_ff$EMPTY_N,
       ram_serverAdapterB_outData_ff$ENQ,
       ram_serverAdapterB_outData_ff$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways;

  // inputs to muxes for submodule ports
  reg [13 : 0] MUX_ram_memory$a_put_2__VAL_1;

  // remaining internal signals
  wire [2 : 0] ram_serverAdapterA_cnt_3_PLUS_IF_ram_serverAda_ETC___d29,
	       ram_serverAdapterB_cnt_1_PLUS_IF_ram_serverAda_ETC___d77;
  wire [1 : 0] x__h92311, x__h92521;

  // action method read_ram
  assign RDY_read_ram = 1'd1 ;

  // actionvalue method get_read_res
  assign get_read_res = { x__h92311, x__h92521 } ;
  assign RDY_get_read_res =
	     ram_serverAdapterA_outData_beforeDeq$Q_OUT &&
	     (ram_serverAdapterA_outData_ff$EMPTY_N ||
	      ram_serverAdapterA_outData_enqw$whas) &&
	     ram_serverAdapterB_outData_beforeDeq$Q_OUT &&
	     (ram_serverAdapterB_outData_ff$EMPTY_N ||
	      ram_serverAdapterB_outData_enqw$whas) ;

  // action method configure_DE_belonging
  assign RDY_configure_DE_belonging = 1'd1 ;

  // action method write_data
  assign RDY_write_data = (ram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;

  // submodule ram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd14),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(15'd16384)) ram_memory(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(ram_memory$ADDRA),
					  .ADDRB(ram_memory$ADDRB),
					  .DIA(ram_memory$DIA),
					  .DIB(ram_memory$DIB),
					  .WEA(ram_memory$WEA),
					  .WEB(ram_memory$WEB),
					  .ENA(ram_memory$ENA),
					  .ENB(ram_memory$ENB),
					  .DOA(ram_memory$DOA),
					  .DOB(ram_memory$DOB));

  // submodule ram_serverAdapterA_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ram_serverAdapterA_outData_beforeDeq(.CLK(CLK),
								.D_IN(ram_serverAdapterA_outData_beforeDeq$D_IN),
								.EN(ram_serverAdapterA_outData_beforeDeq$EN),
								.Q_OUT(ram_serverAdapterA_outData_beforeDeq$Q_OUT));

  // submodule ram_serverAdapterA_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ram_serverAdapterA_outData_beforeEnq(.CLK(CLK),
								.D_IN(ram_serverAdapterA_outData_beforeEnq$D_IN),
								.EN(ram_serverAdapterA_outData_beforeEnq$EN),
								.Q_OUT(ram_serverAdapterA_outData_beforeEnq$Q_OUT));

  // submodule ram_serverAdapterA_outData_ff
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) ram_serverAdapterA_outData_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ram_serverAdapterA_outData_ff$D_IN),
							    .ENQ(ram_serverAdapterA_outData_ff$ENQ),
							    .DEQ(ram_serverAdapterA_outData_ff$DEQ),
							    .CLR(ram_serverAdapterA_outData_ff$CLR),
							    .D_OUT(ram_serverAdapterA_outData_ff$D_OUT),
							    .FULL_N(ram_serverAdapterA_outData_ff$FULL_N),
							    .EMPTY_N(ram_serverAdapterA_outData_ff$EMPTY_N));

  // submodule ram_serverAdapterB_outData_beforeDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ram_serverAdapterB_outData_beforeDeq(.CLK(CLK),
								.D_IN(ram_serverAdapterB_outData_beforeDeq$D_IN),
								.EN(ram_serverAdapterB_outData_beforeDeq$EN),
								.Q_OUT(ram_serverAdapterB_outData_beforeDeq$Q_OUT));

  // submodule ram_serverAdapterB_outData_beforeEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ram_serverAdapterB_outData_beforeEnq(.CLK(CLK),
								.D_IN(ram_serverAdapterB_outData_beforeEnq$D_IN),
								.EN(ram_serverAdapterB_outData_beforeEnq$EN),
								.Q_OUT(ram_serverAdapterB_outData_beforeEnq$Q_OUT));

  // submodule ram_serverAdapterB_outData_ff
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd0)) ram_serverAdapterB_outData_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ram_serverAdapterB_outData_ff$D_IN),
							    .ENQ(ram_serverAdapterB_outData_ff$ENQ),
							    .DEQ(ram_serverAdapterB_outData_ff$DEQ),
							    .CLR(ram_serverAdapterB_outData_ff$CLR),
							    .D_OUT(ram_serverAdapterB_outData_ff$D_OUT),
							    .FULL_N(ram_serverAdapterB_outData_ff$FULL_N),
							    .EMPTY_N(ram_serverAdapterB_outData_ff$EMPTY_N));

  // rule RL_ram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways =
	     (ram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (ram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     read_addr_vec_a_reg[1414] &&
	     !EN_write_data ;

  // inputs to muxes for submodule ports
  always@(id_DE_reg or read_addr_vec_a_reg)
  begin
    case (id_DE_reg)
      7'd0: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[13:0];
      7'd1: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[27:14];
      7'd2: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[41:28];
      7'd3: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[55:42];
      7'd4: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[69:56];
      7'd5: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[83:70];
      7'd6: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[97:84];
      7'd7: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[111:98];
      7'd8: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[125:112];
      7'd9: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[139:126];
      7'd10: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[153:140];
      7'd11: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[167:154];
      7'd12: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[181:168];
      7'd13: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[195:182];
      7'd14: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[209:196];
      7'd15: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[223:210];
      7'd16: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[237:224];
      7'd17: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[251:238];
      7'd18: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[265:252];
      7'd19: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[279:266];
      7'd20: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[293:280];
      7'd21: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[307:294];
      7'd22: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[321:308];
      7'd23: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[335:322];
      7'd24: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[349:336];
      7'd25: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[363:350];
      7'd26: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[377:364];
      7'd27: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[391:378];
      7'd28: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[405:392];
      7'd29: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[419:406];
      7'd30: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[433:420];
      7'd31: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[447:434];
      7'd32: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[461:448];
      7'd33: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[475:462];
      7'd34: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[489:476];
      7'd35: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[503:490];
      7'd36: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[517:504];
      7'd37: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[531:518];
      7'd38: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[545:532];
      7'd39: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[559:546];
      7'd40: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[573:560];
      7'd41: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[587:574];
      7'd42: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[601:588];
      7'd43: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[615:602];
      7'd44: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[629:616];
      7'd45: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[643:630];
      7'd46: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[657:644];
      7'd47: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[671:658];
      7'd48: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[685:672];
      7'd49: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[699:686];
      7'd50: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[713:700];
      7'd51: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[727:714];
      7'd52: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[741:728];
      7'd53: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[755:742];
      7'd54: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[769:756];
      7'd55: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[783:770];
      7'd56: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[797:784];
      7'd57: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[811:798];
      7'd58: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[825:812];
      7'd59: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[839:826];
      7'd60: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[853:840];
      7'd61: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[867:854];
      7'd62: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[881:868];
      7'd63: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[895:882];
      7'd64: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[909:896];
      7'd65: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[923:910];
      7'd66: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[937:924];
      7'd67: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[951:938];
      7'd68: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[965:952];
      7'd69: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[979:966];
      7'd70: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[993:980];
      7'd71: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1007:994];
      7'd72: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1021:1008];
      7'd73: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1035:1022];
      7'd74: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1049:1036];
      7'd75: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1063:1050];
      7'd76: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1077:1064];
      7'd77: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1091:1078];
      7'd78: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1105:1092];
      7'd79: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1119:1106];
      7'd80: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1133:1120];
      7'd81: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1147:1134];
      7'd82: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1161:1148];
      7'd83: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1175:1162];
      7'd84: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1189:1176];
      7'd85: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1203:1190];
      7'd86: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1217:1204];
      7'd87: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1231:1218];
      7'd88: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1245:1232];
      7'd89: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1259:1246];
      7'd90: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1273:1260];
      7'd91: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1287:1274];
      7'd92: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1301:1288];
      7'd93: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1315:1302];
      7'd94: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1329:1316];
      7'd95: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1343:1330];
      7'd96: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1357:1344];
      7'd97: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1371:1358];
      7'd98: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1385:1372];
      7'd99: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1399:1386];
      7'd100: MUX_ram_memory$a_put_2__VAL_1 = read_addr_vec_a_reg[1413:1400];
      default: MUX_ram_memory$a_put_2__VAL_1 =
		   14'b10101010101010 /* unspecified value */ ;
    endcase
  end

  // inlined wires
  assign read_addr_vec_a_reg_1$wget = { 1'd1, read_ram_read_addr_vec_a } ;
  assign read_addr_vec_b_reg_1$wget = { 1'd1, read_ram_read_addr_vec_b } ;
  assign ram_serverAdapterA_outData_enqw$whas =
	     ram_serverAdapterA_outData_ff$FULL_N &&
	     ram_serverAdapterA_s1[1] &&
	     ram_serverAdapterA_s1[0] ;
  assign ram_serverAdapterA_cnt_1$whas =
	     (WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ||
	      EN_write_data) &&
	     (!ram_serverAdapterA_writeWithResp$wget[1] ||
	      ram_serverAdapterA_writeWithResp$wget[0]) ;
  assign ram_serverAdapterA_writeWithResp$wget =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ?
	       2'd0 :
	       2'd2 ;
  assign ram_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ||
	     EN_write_data ;
  assign ram_serverAdapterA_s1_1$wget =
	     { 1'd1,
	       !ram_serverAdapterA_writeWithResp$wget[1] ||
	       ram_serverAdapterA_writeWithResp$wget[0] } ;
  assign ram_serverAdapterB_outData_enqw$whas =
	     ram_serverAdapterB_outData_ff$FULL_N &&
	     ram_serverAdapterB_s1[1] &&
	     ram_serverAdapterB_s1[0] ;

  // register id_DE_reg
  assign id_DE_reg$D_IN = configure_DE_belonging_id_DE ;
  assign id_DE_reg$EN = EN_configure_DE_belonging ;

  // register ram_serverAdapterA_cnt
  assign ram_serverAdapterA_cnt$D_IN =
	     ram_serverAdapterA_cnt_3_PLUS_IF_ram_serverAda_ETC___d29 ;
  assign ram_serverAdapterA_cnt$EN =
	     ram_serverAdapterA_cnt_1$whas || EN_get_read_res ;

  // register ram_serverAdapterA_s1
  assign ram_serverAdapterA_s1$D_IN =
	     ram_serverAdapterA_writeWithResp$whas ?
	       ram_serverAdapterA_s1_1$wget :
	       2'd0 ;
  assign ram_serverAdapterA_s1$EN = 1'd1 ;

  // register ram_serverAdapterB_cnt
  assign ram_serverAdapterB_cnt$D_IN =
	     ram_serverAdapterB_cnt_1_PLUS_IF_ram_serverAda_ETC___d77 ;
  assign ram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ||
	     EN_get_read_res ;

  // register ram_serverAdapterB_s1
  assign ram_serverAdapterB_s1$D_IN =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign ram_serverAdapterB_s1$EN = 1'd1 ;

  // register read_addr_vec_a_reg
  assign read_addr_vec_a_reg$D_IN =
	     EN_read_ram ?
	       read_addr_vec_a_reg_1$wget :
	       1415'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign read_addr_vec_a_reg$EN = 1'd1 ;

  // register read_addr_vec_b_reg
  assign read_addr_vec_b_reg$D_IN =
	     EN_read_ram ?
	       read_addr_vec_b_reg_1$wget :
	       1415'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign read_addr_vec_b_reg$EN = 1'd1 ;

  // submodule ram_memory
  assign ram_memory$ADDRA =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ?
	       MUX_ram_memory$a_put_2__VAL_1 :
	       write_data_addr ;
  always@(id_DE_reg or read_addr_vec_b_reg)
  begin
    case (id_DE_reg)
      7'd0: ram_memory$ADDRB = read_addr_vec_b_reg[13:0];
      7'd1: ram_memory$ADDRB = read_addr_vec_b_reg[27:14];
      7'd2: ram_memory$ADDRB = read_addr_vec_b_reg[41:28];
      7'd3: ram_memory$ADDRB = read_addr_vec_b_reg[55:42];
      7'd4: ram_memory$ADDRB = read_addr_vec_b_reg[69:56];
      7'd5: ram_memory$ADDRB = read_addr_vec_b_reg[83:70];
      7'd6: ram_memory$ADDRB = read_addr_vec_b_reg[97:84];
      7'd7: ram_memory$ADDRB = read_addr_vec_b_reg[111:98];
      7'd8: ram_memory$ADDRB = read_addr_vec_b_reg[125:112];
      7'd9: ram_memory$ADDRB = read_addr_vec_b_reg[139:126];
      7'd10: ram_memory$ADDRB = read_addr_vec_b_reg[153:140];
      7'd11: ram_memory$ADDRB = read_addr_vec_b_reg[167:154];
      7'd12: ram_memory$ADDRB = read_addr_vec_b_reg[181:168];
      7'd13: ram_memory$ADDRB = read_addr_vec_b_reg[195:182];
      7'd14: ram_memory$ADDRB = read_addr_vec_b_reg[209:196];
      7'd15: ram_memory$ADDRB = read_addr_vec_b_reg[223:210];
      7'd16: ram_memory$ADDRB = read_addr_vec_b_reg[237:224];
      7'd17: ram_memory$ADDRB = read_addr_vec_b_reg[251:238];
      7'd18: ram_memory$ADDRB = read_addr_vec_b_reg[265:252];
      7'd19: ram_memory$ADDRB = read_addr_vec_b_reg[279:266];
      7'd20: ram_memory$ADDRB = read_addr_vec_b_reg[293:280];
      7'd21: ram_memory$ADDRB = read_addr_vec_b_reg[307:294];
      7'd22: ram_memory$ADDRB = read_addr_vec_b_reg[321:308];
      7'd23: ram_memory$ADDRB = read_addr_vec_b_reg[335:322];
      7'd24: ram_memory$ADDRB = read_addr_vec_b_reg[349:336];
      7'd25: ram_memory$ADDRB = read_addr_vec_b_reg[363:350];
      7'd26: ram_memory$ADDRB = read_addr_vec_b_reg[377:364];
      7'd27: ram_memory$ADDRB = read_addr_vec_b_reg[391:378];
      7'd28: ram_memory$ADDRB = read_addr_vec_b_reg[405:392];
      7'd29: ram_memory$ADDRB = read_addr_vec_b_reg[419:406];
      7'd30: ram_memory$ADDRB = read_addr_vec_b_reg[433:420];
      7'd31: ram_memory$ADDRB = read_addr_vec_b_reg[447:434];
      7'd32: ram_memory$ADDRB = read_addr_vec_b_reg[461:448];
      7'd33: ram_memory$ADDRB = read_addr_vec_b_reg[475:462];
      7'd34: ram_memory$ADDRB = read_addr_vec_b_reg[489:476];
      7'd35: ram_memory$ADDRB = read_addr_vec_b_reg[503:490];
      7'd36: ram_memory$ADDRB = read_addr_vec_b_reg[517:504];
      7'd37: ram_memory$ADDRB = read_addr_vec_b_reg[531:518];
      7'd38: ram_memory$ADDRB = read_addr_vec_b_reg[545:532];
      7'd39: ram_memory$ADDRB = read_addr_vec_b_reg[559:546];
      7'd40: ram_memory$ADDRB = read_addr_vec_b_reg[573:560];
      7'd41: ram_memory$ADDRB = read_addr_vec_b_reg[587:574];
      7'd42: ram_memory$ADDRB = read_addr_vec_b_reg[601:588];
      7'd43: ram_memory$ADDRB = read_addr_vec_b_reg[615:602];
      7'd44: ram_memory$ADDRB = read_addr_vec_b_reg[629:616];
      7'd45: ram_memory$ADDRB = read_addr_vec_b_reg[643:630];
      7'd46: ram_memory$ADDRB = read_addr_vec_b_reg[657:644];
      7'd47: ram_memory$ADDRB = read_addr_vec_b_reg[671:658];
      7'd48: ram_memory$ADDRB = read_addr_vec_b_reg[685:672];
      7'd49: ram_memory$ADDRB = read_addr_vec_b_reg[699:686];
      7'd50: ram_memory$ADDRB = read_addr_vec_b_reg[713:700];
      7'd51: ram_memory$ADDRB = read_addr_vec_b_reg[727:714];
      7'd52: ram_memory$ADDRB = read_addr_vec_b_reg[741:728];
      7'd53: ram_memory$ADDRB = read_addr_vec_b_reg[755:742];
      7'd54: ram_memory$ADDRB = read_addr_vec_b_reg[769:756];
      7'd55: ram_memory$ADDRB = read_addr_vec_b_reg[783:770];
      7'd56: ram_memory$ADDRB = read_addr_vec_b_reg[797:784];
      7'd57: ram_memory$ADDRB = read_addr_vec_b_reg[811:798];
      7'd58: ram_memory$ADDRB = read_addr_vec_b_reg[825:812];
      7'd59: ram_memory$ADDRB = read_addr_vec_b_reg[839:826];
      7'd60: ram_memory$ADDRB = read_addr_vec_b_reg[853:840];
      7'd61: ram_memory$ADDRB = read_addr_vec_b_reg[867:854];
      7'd62: ram_memory$ADDRB = read_addr_vec_b_reg[881:868];
      7'd63: ram_memory$ADDRB = read_addr_vec_b_reg[895:882];
      7'd64: ram_memory$ADDRB = read_addr_vec_b_reg[909:896];
      7'd65: ram_memory$ADDRB = read_addr_vec_b_reg[923:910];
      7'd66: ram_memory$ADDRB = read_addr_vec_b_reg[937:924];
      7'd67: ram_memory$ADDRB = read_addr_vec_b_reg[951:938];
      7'd68: ram_memory$ADDRB = read_addr_vec_b_reg[965:952];
      7'd69: ram_memory$ADDRB = read_addr_vec_b_reg[979:966];
      7'd70: ram_memory$ADDRB = read_addr_vec_b_reg[993:980];
      7'd71: ram_memory$ADDRB = read_addr_vec_b_reg[1007:994];
      7'd72: ram_memory$ADDRB = read_addr_vec_b_reg[1021:1008];
      7'd73: ram_memory$ADDRB = read_addr_vec_b_reg[1035:1022];
      7'd74: ram_memory$ADDRB = read_addr_vec_b_reg[1049:1036];
      7'd75: ram_memory$ADDRB = read_addr_vec_b_reg[1063:1050];
      7'd76: ram_memory$ADDRB = read_addr_vec_b_reg[1077:1064];
      7'd77: ram_memory$ADDRB = read_addr_vec_b_reg[1091:1078];
      7'd78: ram_memory$ADDRB = read_addr_vec_b_reg[1105:1092];
      7'd79: ram_memory$ADDRB = read_addr_vec_b_reg[1119:1106];
      7'd80: ram_memory$ADDRB = read_addr_vec_b_reg[1133:1120];
      7'd81: ram_memory$ADDRB = read_addr_vec_b_reg[1147:1134];
      7'd82: ram_memory$ADDRB = read_addr_vec_b_reg[1161:1148];
      7'd83: ram_memory$ADDRB = read_addr_vec_b_reg[1175:1162];
      7'd84: ram_memory$ADDRB = read_addr_vec_b_reg[1189:1176];
      7'd85: ram_memory$ADDRB = read_addr_vec_b_reg[1203:1190];
      7'd86: ram_memory$ADDRB = read_addr_vec_b_reg[1217:1204];
      7'd87: ram_memory$ADDRB = read_addr_vec_b_reg[1231:1218];
      7'd88: ram_memory$ADDRB = read_addr_vec_b_reg[1245:1232];
      7'd89: ram_memory$ADDRB = read_addr_vec_b_reg[1259:1246];
      7'd90: ram_memory$ADDRB = read_addr_vec_b_reg[1273:1260];
      7'd91: ram_memory$ADDRB = read_addr_vec_b_reg[1287:1274];
      7'd92: ram_memory$ADDRB = read_addr_vec_b_reg[1301:1288];
      7'd93: ram_memory$ADDRB = read_addr_vec_b_reg[1315:1302];
      7'd94: ram_memory$ADDRB = read_addr_vec_b_reg[1329:1316];
      7'd95: ram_memory$ADDRB = read_addr_vec_b_reg[1343:1330];
      7'd96: ram_memory$ADDRB = read_addr_vec_b_reg[1357:1344];
      7'd97: ram_memory$ADDRB = read_addr_vec_b_reg[1371:1358];
      7'd98: ram_memory$ADDRB = read_addr_vec_b_reg[1385:1372];
      7'd99: ram_memory$ADDRB = read_addr_vec_b_reg[1399:1386];
      7'd100: ram_memory$ADDRB = read_addr_vec_b_reg[1413:1400];
      default: ram_memory$ADDRB = 14'b10101010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_memory$DIA =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ?
	       2'b0 :
	       write_data_data ;
  assign ram_memory$DIB = 2'b0 ;
  assign ram_memory$WEA =
	     !WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ;
  assign ram_memory$WEB = 1'd0 ;
  assign ram_memory$ENA = ram_serverAdapterA_writeWithResp$whas ;
  assign ram_memory$ENB =
	     WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ;

  // submodule ram_serverAdapterA_outData_beforeDeq
  assign ram_serverAdapterA_outData_beforeDeq$D_IN = 1'd1 ;
  assign ram_serverAdapterA_outData_beforeDeq$EN = EN_get_read_res ;

  // submodule ram_serverAdapterA_outData_beforeEnq
  assign ram_serverAdapterA_outData_beforeEnq$D_IN = 1'd1 ;
  assign ram_serverAdapterA_outData_beforeEnq$EN =
	     ram_serverAdapterA_outData_enqw$whas ;

  // submodule ram_serverAdapterA_outData_ff
  assign ram_serverAdapterA_outData_ff$D_IN = ram_memory$DOA ;
  assign ram_serverAdapterA_outData_ff$ENQ =
	     ram_serverAdapterA_outData_enqw$whas &&
	     (!EN_get_read_res || ram_serverAdapterA_outData_ff$EMPTY_N) ;
  assign ram_serverAdapterA_outData_ff$DEQ =
	     EN_get_read_res && ram_serverAdapterA_outData_ff$EMPTY_N ;
  assign ram_serverAdapterA_outData_ff$CLR = 1'b0 ;

  // submodule ram_serverAdapterB_outData_beforeDeq
  assign ram_serverAdapterB_outData_beforeDeq$D_IN = 1'd1 ;
  assign ram_serverAdapterB_outData_beforeDeq$EN = EN_get_read_res ;

  // submodule ram_serverAdapterB_outData_beforeEnq
  assign ram_serverAdapterB_outData_beforeEnq$D_IN = 1'd1 ;
  assign ram_serverAdapterB_outData_beforeEnq$EN =
	     ram_serverAdapterB_outData_enqw$whas ;

  // submodule ram_serverAdapterB_outData_ff
  assign ram_serverAdapterB_outData_ff$D_IN = ram_memory$DOB ;
  assign ram_serverAdapterB_outData_ff$ENQ =
	     ram_serverAdapterB_outData_enqw$whas &&
	     (!EN_get_read_res || ram_serverAdapterB_outData_ff$EMPTY_N) ;
  assign ram_serverAdapterB_outData_ff$DEQ =
	     EN_get_read_res && ram_serverAdapterB_outData_ff$EMPTY_N ;
  assign ram_serverAdapterB_outData_ff$CLR = 1'b0 ;

  // remaining internal signals
  assign ram_serverAdapterA_cnt_3_PLUS_IF_ram_serverAda_ETC___d29 =
	     ram_serverAdapterA_cnt +
	     (ram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (EN_get_read_res ? 3'd7 : 3'd0) ;
  assign ram_serverAdapterB_cnt_1_PLUS_IF_ram_serverAda_ETC___d77 =
	     ram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_ram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (EN_get_read_res ? 3'd7 : 3'd0) ;
  assign x__h92311 =
	     ram_serverAdapterA_outData_ff$EMPTY_N ?
	       ram_serverAdapterA_outData_ff$D_OUT :
	       ram_memory$DOA ;
  assign x__h92521 =
	     ram_serverAdapterB_outData_ff$EMPTY_N ?
	       ram_serverAdapterB_outData_ff$D_OUT :
	       ram_memory$DOB ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        id_DE_reg <= `BSV_ASSIGNMENT_DELAY 7'd0;
	ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	read_addr_vec_a_reg <= `BSV_ASSIGNMENT_DELAY
	    1415'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	read_addr_vec_b_reg <= `BSV_ASSIGNMENT_DELAY
	    1415'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (id_DE_reg$EN) id_DE_reg <= `BSV_ASSIGNMENT_DELAY id_DE_reg$D_IN;
	if (ram_serverAdapterA_cnt$EN)
	  ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      ram_serverAdapterA_cnt$D_IN;
	if (ram_serverAdapterA_s1$EN)
	  ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      ram_serverAdapterA_s1$D_IN;
	if (ram_serverAdapterB_cnt$EN)
	  ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      ram_serverAdapterB_cnt$D_IN;
	if (ram_serverAdapterB_s1$EN)
	  ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      ram_serverAdapterB_s1$D_IN;
	if (read_addr_vec_a_reg$EN)
	  read_addr_vec_a_reg <= `BSV_ASSIGNMENT_DELAY
	      read_addr_vec_a_reg$D_IN;
	if (read_addr_vec_b_reg$EN)
	  read_addr_vec_b_reg <= `BSV_ASSIGNMENT_DELAY
	      read_addr_vec_b_reg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    id_DE_reg = 7'h2A;
    ram_serverAdapterA_cnt = 3'h2;
    ram_serverAdapterA_s1 = 2'h2;
    ram_serverAdapterB_cnt = 3'h2;
    ram_serverAdapterB_s1 = 2'h2;
    read_addr_vec_a_reg =
	1415'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    read_addr_vec_b_reg =
	1415'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (ram_serverAdapterA_s1[1] &&
	  (!ram_serverAdapterA_outData_beforeEnq$Q_OUT ||
	   !ram_serverAdapterA_outData_beforeDeq$Q_OUT ||
	   !ram_serverAdapterA_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (ram_serverAdapterB_s1[1] &&
	  (!ram_serverAdapterB_outData_beforeEnq$Q_OUT ||
	   !ram_serverAdapterB_outData_beforeDeq$Q_OUT ||
	   !ram_serverAdapterB_outData_ff$FULL_N))
	$display("ERROR: %m: mkBRAMAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkDYNAMIC_RAM

