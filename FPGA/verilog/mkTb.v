//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
// On Thu Jan 11 17:01:20 CST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire start_wire$whas, state_set_pw$whas;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule de_top
  wire [47 : 0] de_top$lookup_mac;
  wire [31 : 0] de_top$lookup_dstIP, de_top$lookup_srcIP;
  wire [13 : 0] de_top$write_ram_addr_wr;
  wire [9 : 0] de_top$configure_DE_ram_ram_id_end,
	       de_top$configure_DE_ram_ram_id_start,
	       de_top$write_ram_ram_id;
  wire [6 : 0] de_top$configure_DE_ram_id_of_DE;
  wire [1 : 0] de_top$write_ram_data_wr;
  wire de_top$EN_configure_DE_ram,
       de_top$EN_lookup,
       de_top$EN_write_ram,
       de_top$RDY_lookup;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l26c9,
       WILL_FIRE_RL_action_l27c15,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l25c17;

  // inputs to muxes for submodule ports
  wire MUX_start_reg$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h6933;
  reg [31 : 0] v__h6927;
  // synopsys translate_on

  // remaining internal signals
  wire abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47;

  // submodule de_top
  mkDE_TOP de_top(.CLK(CLK),
		  .RST_N(RST_N),
		  .configure_DE_ram_id_of_DE(de_top$configure_DE_ram_id_of_DE),
		  .configure_DE_ram_ram_id_end(de_top$configure_DE_ram_ram_id_end),
		  .configure_DE_ram_ram_id_start(de_top$configure_DE_ram_ram_id_start),
		  .lookup_dstIP(de_top$lookup_dstIP),
		  .lookup_mac(de_top$lookup_mac),
		  .lookup_srcIP(de_top$lookup_srcIP),
		  .write_ram_addr_wr(de_top$write_ram_addr_wr),
		  .write_ram_data_wr(de_top$write_ram_data_wr),
		  .write_ram_ram_id(de_top$write_ram_ram_id),
		  .EN_lookup(de_top$EN_lookup),
		  .EN_configure_DE_ram(de_top$EN_configure_DE_ram),
		  .EN_write_ram(de_top$EN_write_ram),
		  .RDY_lookup(de_top$RDY_lookup),
		  .get_res_fst(),
		  .RDY_get_res_fst(),
		  .get_res_snd_fst(),
		  .RDY_get_res_snd_fst(),
		  .get_res_snd_snd_fst(),
		  .RDY_get_res_snd_snd_fst(),
		  .get_res_snd_snd_snd(),
		  .RDY_get_res_snd_snd_snd(),
		  .RDY_configure_DE_ram(),
		  .RDY_write_ram());

  // rule RL_action_l27c15
  assign WILL_FIRE_RL_action_l27c15 =
	     de_top$RDY_lookup && state_mkFSMstate == 3'd1 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 &&
	     start_reg ;

  // rule RL_action_l26c9
  assign WILL_FIRE_RL_action_l26c9 =
	     start_wire$whas &&
	     (state_mkFSMstate == 3'd0 || state_mkFSMstate == 3'd2) ;

  // rule RL_idle_l25c17
  assign WILL_FIRE_RL_idle_l25c17 =
	     !start_wire$whas && state_mkFSMstate == 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 &&
	     !start_reg &&
	     !running ;

  // inlined wires
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l25c17 || WILL_FIRE_RL_action_l27c15 ||
	     WILL_FIRE_RL_action_l26c9 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l25c17 or
	  WILL_FIRE_RL_action_l26c9 or WILL_FIRE_RL_action_l27c15)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l25c17: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l26c9: state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_action_l27c15: state_mkFSMstate$D_IN = 3'd2;
      default: state_mkFSMstate$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l25c17 || WILL_FIRE_RL_action_l26c9 ||
	     WILL_FIRE_RL_action_l27c15 ;

  // submodule de_top
  assign de_top$configure_DE_ram_id_of_DE = 7'h0 ;
  assign de_top$configure_DE_ram_ram_id_end = 10'h0 ;
  assign de_top$configure_DE_ram_ram_id_start = 10'h0 ;
  assign de_top$lookup_dstIP = 32'h87654321 ;
  assign de_top$lookup_mac = 48'h123456789ABC ;
  assign de_top$lookup_srcIP = 32'h12345678 ;
  assign de_top$write_ram_addr_wr = 14'h0 ;
  assign de_top$write_ram_data_wr = 2'h0 ;
  assign de_top$write_ram_ram_id = 10'h0 ;
  assign de_top$EN_lookup = WILL_FIRE_RL_action_l27c15 ;
  assign de_top$EN_configure_DE_ram = 1'b0 ;
  assign de_top$EN_write_ram = 1'b0 ;

  // remaining internal signals
  assign abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 =
	     (state_mkFSMstate == 3'd0 || state_mkFSMstate == 3'd2) &&
	     (!start_reg_1 || state_fired) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l26c9)
	begin
	  v__h6933 = $stime;
	  #0;
	end
    v__h6927 = v__h6933 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l26c9)
	$display("cur cycle: %d, stmt starting...", v__h6927);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l26c9 && WILL_FIRE_RL_action_l27c15)
	$display("Error: \"tbDE.bsv\", line 26, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l26c9] and\n  [RL_action_l27c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 &&
	  !start_reg)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTb

