#ifndef _HEADERS_
#define _HEADERS_

//14 B
header ethernet_h {
    bit<48> dst_addr;
    bit<48> src_addr;
    bit<16> ether_type;
}

// 20B
header ipv4_h {
    bit<4> version;
    bit<4> ihl;
    bit<8> diffserv;
    bit<16> total_len;
    bit<16> identification;
    bit<3> flags;
    bit<13> frag_offset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdr_checksum;
    bit<32> src_addr;
    bit<32> dst_addr;
}

// 8B
header udp_h {
	bit<16> src_port;
	bit<16> dst_port;
	bit<16> total_len;
	bit<16> checksum;
}

//26B
header flag_h {
    //used to store the basic info (generated by dpdk sender)
    bit<48> mac_addr;
    bit<32> src_ip;
    bit<32> dst_ip;
    bit<16> src_port;
    bit<16> dst_port;

    //used to show the packet states
    bit<16> pkt_flag;   //0xffff means a packet to offChip, 0xfafa means a packet to receiver
    bit<8> table_flag;  //0: not forward  0b1: MAC(5 DE), 0b10: FIB(10 DE), 0b100: ACL(10+10 DE)
                        // 0b1000: MAC updating 0b10000: FIB updating, 0b100000: ACL updating
    bit<8> zero;
    bit<32> result;
}

//20B
header info_h {
    bit<8> diff_1;
    bit<8> diff_2;
    bit<8> diff_3;
    bit<8> diff_4;
    bit<8> diff_5;
    bit<8> diff_6;
    bit<8> diff_7;
    bit<8> diff_8;
    bit<8> diff_9;
    bit<8> diff_10;
    bit<8> diff_11;
    bit<8> diff_12;
    bit<8> diff_13;
    bit<8> diff_14;
    bit<8> diff_15;
    bit<8> diff_16;
    bit<8> diff_17;
    bit<8> diff_18;
    bit<8> diff_19;
    bit<8> diff_20;
}


struct ingress_header_t {
	ethernet_h ethernet;
	ipv4_h ipv4;
	udp_h udp;
    flag_h flag;
	info_h info;
}

struct egress_header_t {
    ethernet_h ethernet;
	ipv4_h ipv4;
	udp_h udp;
    flag_h flag;
	info_h info;
}

#endif
